output_dir: ${OUTPUT_DIR}

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: ${BASE_MODEL_PATH}/Llama-3.2-3B-Instruct/original/tokenizer.model
  max_seq_len: 8192

# Dataset
dataset:
  - _component_: torchtune.datasets.chat_dataset
    source: json
    data_files: ${DATA_FILE_PATH}
    conversation_column: messages_chosen
    conversation_style: openai
    split: train
    packed: false

    # YOU CAN ADD OTHER DATASETS HERE FOR MIXTURE
  # - _component_: torchtune.datasets.chat_dataset
  #   source: json
  #   data_files: ${MIXTURE_DATA_FILE_PATH}
  #   conversation_column: messages
  #   conversation_style: openai
  #   split: train[:50%]
  #   packed: false

seed: 0
shuffle: True

# Model Arguments
model:
  _component_: torchtune.models.llama3_2.llama3_2_3b

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${BASE_MODEL_PATH}/Llama-3.2-3B-Instruct
  checkpoint_files: [
    model-00001-of-00002.safetensors,
    model-00002-of-00002.safetensors,
  ]
  recipe_checkpoint: null
  output_dir: ${OUTPUT_DIR}
  model_type: LLAMA3_2
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 1
epochs: 1

optimizer:
  _component_: torch.optim.AdamW
  lr: 2e-4
  fused: true
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss
max_steps_per_epoch: null
gradient_accumulation_steps: 4  # Use to increase effective batch size
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 10

# Training env
device: cuda

# Memory management
enable_activation_checkpointing: true  # True reduces memory
enable_activation_offloading: false  # True reduces memory
clip_grad_norm: null
compile: true  # torch.compile the model + loss, True increases speed + decreases memory
optimizer_in_bwd: False  # True saves memory. Requires gradient_accumulation_steps=1

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${OUTPUT_DIR}/logs
log_every_n_steps: 1
log_peak_memory_stats: True


# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${OUTPUT_DIR}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1
